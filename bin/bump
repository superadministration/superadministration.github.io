#!/usr/bin/env ruby

require "fileutils"

if ARGV.size != 1 || (ARGV.first && ARGV.first !~ /\Av\d+(\.\d+)+\z/)
  puts(<<~USAGE)
    usage: #{$0} [version]

    example: #{$0} v1.2.3
  USAGE
  exit 1
end

matches = Dir["v*/index.md"].sort
NEW_DIRNAME = ARGV.first
NEW_VERSION = NEW_DIRNAME.sub("v", "")
LATEST_DIRNAME = File.dirname(matches.last)
LATEST_VERSION = LATEST_DIRNAME.sub("v", "")

if matches.any? { |math| math.start_with?("#{NEW_DIRNAME}/") }
  puts "directory already exists: #{NEW_DIRNAME}"
  exit 1
end

puts "== Copying `#{LATEST_DIRNAME}` to `#{NEW_DIRNAME}`"
FileUtils.cp_r(LATEST_DIRNAME, NEW_DIRNAME)

puts "== Updating copied files with new version number"
Dir["#{NEW_DIRNAME}/**/*.md"].each do |file|
  contents = File.read(file).gsub(/#{LATEST_DIRNAME.sub("v", "")}/, "#{NEW_DIRNAME.sub("v", "")}")
  File.write(file, contents)
end

puts "== Processing previous files"
matches.each do |file|
  next if file.start_with?("#{NEW_DIRNAME}/")

  puts "   Updating nav_order #{file}"
  contents = File.read(file).sub(/^nav_order: (\d+)$/) do |_match|
    match = Regexp.last_match

    "nav_order: #{match[1].to_i + 1}"
  end

  File.write(file, contents)
end

`git add .`
`git commit --message="Copy #{LATEST_DIRNAME} into #{NEW_DIRNAME}"`

puts "== Done!"
